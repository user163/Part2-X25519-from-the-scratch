# curve25519 parameters
A = 486662 
B = 1
p = 2**255 - 19 # prime, order of Gallois field GF(p)
Gx = 9
Gy = 14781619447589544791020593568409986887264606134616475288964881837755586237401
l = 2**252 + 27742317777372353535851937790883648493 # order of G, = order of subgroup generated by G 

def add_affine(q1, q2):
    if (q1 == q2):
        return double_affine(q1)
    if (q1 == None):
        return q2
    if (q2 == None):
        return q1
    (x1, y1) = q1
    (x2, y2) = q2
    if (x2 == x1 and y2 == -y1):
        return None
    lam_denominator_inv = pow(x1 - x2, -1, p)
    lam = ((y1 - y2) * lam_denominator_inv) % p 
    x3 = (B * pow(lam, 2, p) - A - x1 - x2) % p
    y3 = (lam * (x1 - x3) - y1) % p
    return (x3, y3)

def double_affine(q1):
    if q1 == None:
        return None
    (x1, y1) = q1
    if y1 == 0:
        return None
    lam_denominator_inv = pow(2 * B * y1, -1, p)
    lam = ((3 * pow(x1, 2, p) + 2 * A * x1 + 1) * lam_denominator_inv) % p
    x3 = (B * pow(lam, 2, p) - A - 2 * x1) % p
    y3 = (lam * (x1 - x3) - y1) % p
    return (x3, y3)

'''
Q1 <> Q2
Constraint: Q2 = Q1 + P
Q3 := Q1 + Q2
'''
def add_projective_constDiff(Q1, Q2, P):
    (X1, Z1) = Q1
    (X2, Z2) = Q2
    (PX, PZ) = P
    S = ((X2 - Z2) * (X1 + Z1)) % p
    T = ((X2 + Z2) * (X1 - Z1)) % p
    X3 = (PZ * pow(S + T, 2, p)) % p
    Z3 = (PX * pow(S - T, 2, p)) % p
    return (X3, Z3)

'''
Q3 = 2 * Q1
'''
def double_projective(Q1):
    (X1, Z1) = Q1
    X3 = (pow(X1 + Z1, 2, p) * pow(X1 - Z1, 2, p)) % p
    Z3 = (4 * X1 * Z1 * (pow(X1 - Z1, 2, p) + (A + 2) * X1 * Z1) ) % p
    return (X3, Z3)

def affine_to_projective(q1):
    if q1 == None:
        return (1, 0)
    (x1, y1) = q1
    return (x1, 1)

def projective_to_compressed(q1):
    (x1, z1) = q1
    if (z1 == 0):
        return None
    return ((x1 * pow(z1, -1, p)) % p)

def compressed_to_projective(q1):
    if q1 == None:
        return (1,0)
    return (q1, 1)
  
def isOnCurve(Q):
    (X, Y) = Q
    return ((X ** 3 + A * X ** 2 + X) % p) == ((B * Y**2) % p)

Q1_aff = None
res1_None = add_affine(Q1_aff, Q1_aff)
print(res1_None)

Q1_aff = (Gx, Gy)
Q2_aff = (Gx, -Gy)
res2_None = add_affine(Q1_aff, Q2_aff)
print(res2_None)

Q1_aff = (0, 0)
res3_None = add_affine(Q1_aff, Q1_aff)
print(res3_None)

Q1_aff = (Gx, Gy)
Q2_aff = None
res4_1G = add_affine(Q1_aff, Q2_aff)
print("isOnCurve: " + str(isOnCurve(res4_1G))  + " - Point: " + str(res4_1G))

Q1_aff = None
Q2_aff = (Gx, Gy)
res5_1G = add_affine(Q1_aff, Q2_aff)
print("isOnCurve: " + str(isOnCurve(res5_1G))  + " - Point: " + str(res5_1G))

Q1_aff = (Gx, Gy)
res6_2G = add_affine(Q1_aff, Q1_aff)
print("isOnCurve: " + str(isOnCurve(res6_2G))  + " - Point: " + str(res6_2G))

Q1_aff = (Gx, Gy)
Q2_aff = add_affine(Q1_aff, Q1_aff)
res7_3G = add_affine(Q1_aff, Q2_aff)
print("isOnCurve: " + str(isOnCurve(res7_3G))  + " - Point: " + str(res7_3G))

Q1_aff = (Gx, Gy)
Q2_aff = add_affine(Q1_aff, Q1_aff)
res8_4G = add_affine(Q2_aff, Q2_aff)
print("isOnCurve: " + str(isOnCurve(res8_4G))  + " - Point: " + str(res8_4G))

G_aff = (Gx, Gy)
Q1_aff = add_affine(G_aff, G_aff)
Q2_aff = add_affine(Q1_aff, G_aff)
res9_5G = add_affine(Q1_aff, Q2_aff)
print("isOnCurve: " + str(isOnCurve(res9_5G))  + " - Point: " + str(res9_5G))

Q1_aff = (Gx, Gy)
Q2_aff = add_affine(Q1_aff, Q1_aff)
Q3_aff = (Gx, -Gy)
res10_1G = add_affine(Q2_aff, Q3_aff)
print("isOnCurve: " + str(isOnCurve(res10_1G))  + " - Point: " + str(res10_1G))

print()

# Q1=I, Q3=2*I = I
Q1_pro = compressed_to_projective(None)
res12_0 = double_projective(Q1_pro)
print(projective_to_compressed(res12_0))

# Q1=I, Q2=G, Delta=G => Q3=I+G=G
G_pro = compressed_to_projective(Gx)
Q1_pro = compressed_to_projective(None)
Q2_pro = G_pro
res11_1G = add_projective_constDiff(Q1_pro, Q2_pro, G_pro)
print(projective_to_compressed(res11_1G))

# Q1=G, Q3=2*G
G_pro = compressed_to_projective(Gx)
res13_2G = double_projective(G_pro)
print(projective_to_compressed(res13_2G))

# Q1=G, Q2=2G, Delta=G => Q3=G+2*G=3*G
G_pro = compressed_to_projective(Gx)
Q1_pro = G_pro
Q2_pro = double_projective(G_pro)
res14_3G = add_projective_constDiff(Q1_pro, Q2_pro, G_pro)
print(projective_to_compressed(res14_3G))

# Q1=2*G, Q3=4*G
G_pro = compressed_to_projective(Gx)
res15_4G = double_projective(double_projective(G_pro))
print(projective_to_compressed(res15_4G))

# Q1=2G, Q3=3G, Delta=G => Q3=2*G+3*G=5*G
G_pro = compressed_to_projective(Gx)
Q1_pro = double_projective(G_pro)
Q2_pro = add_projective_constDiff(G_pro, Q1_pro, G_pro)
res16_5G = add_projective_constDiff(Q1_pro, Q2_pro, G_pro)
print(projective_to_compressed(res16_5G))